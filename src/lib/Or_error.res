type t<'a> =
  | Ok('a)
  | Err(Error.t)

let create = a => Ok(a)
let error = err => Err(err)
let error_s = s => Err(Error.fromString(s))

let map = (t, f) =>
  switch t {
  | Ok(a) => Ok(f(a))
  | Err(e) => Err(e)
  }

let flatMap = (t, f) =>
  switch t {
  | Ok(a) => f(a)
  | Err(e) => Err(e)
  }

let okExn = t =>
  switch t {
  | Ok(a) => a
  | Err(e) => Error.raise_(e)
  }

let valOf = t =>
  switch t {
  | Ok(a) => Some(a)
  | Err(_) => None
  }

let getWithDefault = (t, default) =>
  switch t {
  | Ok(a) => a
  | Err(_) => default
  }

let rec all = ts =>
  switch ts {
  | list{} => Ok(list{})
  | list{a, ...rest} =>
    switch (a, all(rest)) {
    | (Ok(a), Ok(rest)) => Ok(Belt.List.add(rest, a))
    | (Err(e), Ok(_)) => Err(e)
    | (Ok(_), Err(e)) => Err(e)
    | (Err(e), Err(e')) => Err(Error.join(e, e'))
    }
  }

let both = ts =>
  switch ts {
  | (Ok(a), Ok(b)) => Ok((a, b))
  | (Err(e), Err(e')) => Err(Error.join(e, e'))
  | (Err(e), _) => Err(e)
  | (_, Err(e)) => Err(e)
  }

let toOption = valOf
let fromOption = (opt, err) =>
  switch opt {
  | Some(a) => Ok(a)
  | None => Err(err)
  }

let toJson = (t, jsonify) =>
  switch t {
  | Ok(a) => Js.Json.array([Js.Json.string("Ok"), jsonify(a)])
  | Err(err) => Js.Json.array([Js.Json.string("Err"), Error.toJson(err)])
  }

let fromJson = (json, decode) => {
  let decode_err = Error.fromString("JSON not a valid Or_error.t")
  switch Js.Json.decodeArray(json) {
  | Some([s, j]) =>
    switch Js.Json.decodeString(s) {
    | Some("Ok") => decode(j)->map(create)
    | Some("Err") => Error.fromJson(j)->fromOption(decode_err)->map(error)
    | _ => error(decode_err)
    }
  | _ => error(decode_err)
  }
}

let toString = (t, stringify) =>
  switch t {
  | Ok(a) => stringify(a)
  | Err(e) => Error.toString(e)
  }

// Autogenerated code:
let both3 = ts =>
  switch ts {
  | (Ok(a), Ok(b), Ok(c)) => Ok((a, b, c))
  | (Err(e1), Err(e2), Err(e3)) => Err(Error.concat(list{e1, e2, e3}))
  | (Err(e1), Err(e2), _) => Err(Error.join(e1, e2))
  | (Err(e1), _, Err(e3)) => Err(Error.join(e1, e3))
  | (_, Err(e2), Err(e3)) => Err(Error.join(e2, e3))
  | (Err(e), _, _) => Err(e)
  | (_, Err(e), _) => Err(e)
  | (_, _, Err(e)) => Err(e)
  }
let both4 = ts =>
  switch ts {
  | (Ok(a), Ok(b), Ok(c), Ok(d)) => Ok((a, b, c, d))
  | (Err(e1), Err(e2), Err(e3), Err(e4)) => Err(Error.concat(list{e1, e2, e3, e4}))
  | (Err(e1), Err(e2), Err(e3), _) => Err(Error.concat(list{e1, e2, e3}))
  | (Err(e1), Err(e2), _, Err(e4)) => Err(Error.concat(list{e1, e2, e4}))
  | (Err(e1), _, Err(e3), Err(e4)) => Err(Error.concat(list{e1, e3, e4}))
  | (_, Err(e2), Err(e3), Err(e4)) => Err(Error.concat(list{e2, e3, e4}))
  | (Err(e1), Err(e2), _, _) => Err(Error.join(e1, e2))
  | (Err(e1), _, Err(e3), _) => Err(Error.join(e1, e3))
  | (Err(e1), _, _, Err(e4)) => Err(Error.join(e1, e4))
  | (_, Err(e2), Err(e3), _) => Err(Error.join(e2, e3))
  | (_, Err(e2), _, Err(e4)) => Err(Error.join(e2, e4))
  | (_, _, Err(e3), Err(e4)) => Err(Error.join(e3, e4))
  | (Err(e), _, _, _) => Err(e)
  | (_, Err(e), _, _) => Err(e)
  | (_, _, Err(e), _) => Err(e)
  | (_, _, _, Err(e)) => Err(e)
  }
let both5 = ts =>
  switch ts {
  | (Ok(a), Ok(b), Ok(c), Ok(d), Ok(e)) => Ok((a, b, c, d, e))
  | (Err(e1), Err(e2), Err(e3), Err(e4), Err(e5)) => Err(Error.concat(list{e1, e2, e3, e4, e5}))
  | (Err(e1), Err(e2), Err(e3), Err(e4), _) => Err(Error.concat(list{e1, e2, e3, e4}))
  | (Err(e1), Err(e2), Err(e3), _, Err(e5)) => Err(Error.concat(list{e1, e2, e3, e5}))
  | (Err(e1), Err(e2), _, Err(e4), Err(e5)) => Err(Error.concat(list{e1, e2, e4, e5}))
  | (Err(e1), _, Err(e3), Err(e4), Err(e5)) => Err(Error.concat(list{e1, e3, e4, e5}))
  | (_, Err(e2), Err(e3), Err(e4), Err(e5)) => Err(Error.concat(list{e2, e3, e4, e5}))
  | (Err(e1), Err(e2), Err(e3), _, _) => Err(Error.concat(list{e1, e2, e3}))
  | (Err(e1), Err(e2), _, Err(e4), _) => Err(Error.concat(list{e1, e2, e4}))
  | (Err(e1), Err(e2), _, _, Err(e5)) => Err(Error.concat(list{e1, e2, e5}))
  | (Err(e1), _, Err(e3), Err(e4), _) => Err(Error.concat(list{e1, e3, e4}))
  | (Err(e1), _, Err(e3), _, Err(e5)) => Err(Error.concat(list{e1, e3, e5}))
  | (Err(e1), _, _, Err(e4), Err(e5)) => Err(Error.concat(list{e1, e4, e5}))
  | (_, Err(e2), Err(e3), Err(e4), _) => Err(Error.concat(list{e2, e3, e4}))
  | (_, Err(e2), Err(e3), _, Err(e5)) => Err(Error.concat(list{e2, e3, e5}))
  | (_, Err(e2), _, Err(e4), Err(e5)) => Err(Error.concat(list{e2, e4, e5}))
  | (_, _, Err(e3), Err(e4), Err(e5)) => Err(Error.concat(list{e3, e4, e5}))
  | (Err(e1), Err(e2), _, _, _) => Err(Error.join(e1, e2))
  | (Err(e1), _, Err(e3), _, _) => Err(Error.join(e1, e3))
  | (Err(e1), _, _, Err(e4), _) => Err(Error.join(e1, e4))
  | (Err(e1), _, _, _, Err(e5)) => Err(Error.join(e1, e5))
  | (_, Err(e2), Err(e3), _, _) => Err(Error.join(e2, e3))
  | (_, Err(e2), _, Err(e4), _) => Err(Error.join(e2, e4))
  | (_, Err(e2), _, _, Err(e5)) => Err(Error.join(e2, e5))
  | (_, _, Err(e3), Err(e4), _) => Err(Error.join(e3, e4))
  | (_, _, Err(e3), _, Err(e5)) => Err(Error.join(e3, e5))
  | (_, _, _, Err(e4), Err(e5)) => Err(Error.join(e4, e5))
  | (Err(e), _, _, _, _) => Err(e)
  | (_, Err(e), _, _, _) => Err(e)
  | (_, _, Err(e), _, _) => Err(e)
  | (_, _, _, Err(e), _) => Err(e)
  | (_, _, _, _, Err(e)) => Err(e)
  }

let both6 = ((a, b, c, d, e, f)) =>
  both((both3((a, b, c)), both3((d, e, f))))->map((((a, b, c), (d, e, f))) => (a, b, c, d, e, f))

let both7 = ((a, b, c, d, e, f, g)) =>
  both((both3((a, b, c)), both4((d, e, f, g))))->map((((a, b, c), (d, e, f, g))) => (
    a,
    b,
    c,
    d,
    e,
    f,
    g,
  ))

let both8 = ((a, b, c, d, e, f, g, h)) =>
  both((both4((a, b, c, d)), both4((e, f, g, h))))->map((((a, b, c, d), (e, f, g, h))) => (
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
  ))

let both9 = ((a, b, c, d, e, f, g, h, i)) =>
  both((both4((a, b, c, d)), both5((e, f, g, h, i))))->map((((a, b, c, d), (e, f, g, h, i))) => (
    a,
    b,
    c,
    d,
    e,
    f,
    g,
    h,
    i,
  ))

let both10 = ((a, b, c, d, e, f, g, h, i, j)) =>
  both((both5((a, b, c, d, e)), both5((f, g, h, i, j))))->map(((
    (a, b, c, d, e),
    (f, g, h, i, j),
  )) => (a, b, c, d, e, f, g, h, i, j))

let both11 = ((a, b, c, d, e, f, g, h, i, j, k)) =>
  both3((both4((a, b, c, d)), both4((e, f, g, h)), both3((i, j, k))))->map(((
    (a, b, c, d),
    (e, f, g, h),
    (i, j, k),
  )) => (a, b, c, d, e, f, g, h, i, j, k))

let both12 = ((a, b, c, d, e, f, g, h, i, j, k, l)) =>
  both3((both4((a, b, c, d)), both4((e, f, g, h)), both4((i, j, k, l))))->map(((
    (a, b, c, d),
    (e, f, g, h),
    (i, j, k, l),
  )) => (a, b, c, d, e, f, g, h, i, j, k, l))

let both13 = ((a, b, c, d, e, f, g, h, i, j, k, l, m)) =>
  both3((both4((a, b, c, d)), both4((e, f, g, h)), both5((i, j, k, l, m))))->map(((
    (a, b, c, d),
    (e, f, g, h),
    (i, j, k, l, m),
  )) => (a, b, c, d, e, f, g, h, i, j, k, l, m))
